#summary The content on this page will give users an idea that not only wil. TestLink methods be supported but also methods that are useful by providing additional functionality.

= Introduction =

In this example we support the base method for adding test suites but we also support adding test suites by test project name.


= Details =

	/**
	 * Create top level test suite under a specific project name
	 * 
	 * @param projectName
	 * @param suiteName
	 * @param description
	 * @throws TestLinkAPIException
	 */
	public Integer createTestSuite(String projectName, String suiteName, String description) 
		throws TestLinkAPIException
	{
		Object id = null;
		TestLinkAPIResults results = getProjects();
		for ( int i = 0; i < results.size(); i++ ) {
			Object data = results.getValue(i, API_RESULT_NAME);
			if ( data != null ) {
				if ( projectName.equals(data.toString()) ) {
					id = results.getValue(i, API_RESULT_IDENTIFIER);
					break;
				}
			}
		}
		
		if ( id != null ) {
			Integer projectID = new Integer(id.toString());
			return createTestSuite(projectID, suiteName, description);
		}
		
		return null;
	}
	
	/**
	 * Create top level test suite under a specific project identifier
	 * 
	 * @param projectID
	 * @param suiteName
	 * @param description
	 * @return
	 * @throws TestLinkAPIException
	 */
	public Integer createTestSuite(Integer projectID, String suiteName, String description) 
		throws TestLinkAPIException
	{
		return createTestSuite(projectID, suiteName, description, null, null, null);
	}
	
	/**
	 * 
	 * Create a test suite at any level using the project identifier and
	 * the parent suite identifier information.
	 * 
	 * @param projectID
	 * @param suiteName
	 * @param description
	 * @param parentID
	 * @param order
	 * @param check
	 * @return
	 * @throws TestLinkAPIException
	 */
	public Integer createTestSuite(
		Integer projectID, 
		String suiteName,
		String description,
		Integer parentID,
		Integer order,
		Boolean check)
		throws TestLinkAPIException
	{
		Hashtable<String, Object> params = new Hashtable<String, Object>();				
		params.put(API_PARAM_DEV_KEY, DEV_KEY);
		params.put(API_PARAM_TEST_PROJECT_ID, projectID.toString());
		params.put(API_PARAM_TEST_SUITE_NAME, suiteName);
		params.put(API_PARAM_DETAILS, description);
		if ( parentID != null ) {
			params.put(API_PARAM_PARENT_ID, parentID.toString());
		}
		if ( order != null ) {
			params.put(API_PARAM_ORDER, order.toString());
		}
		if ( check != null ) {
			params.put(API_PARAM_CHECK_DUP_NAMES, check.toString());
		}
		TestLinkAPIResults results = executeRpcMethod(API_METHOD_CREATE_SUITE, params);
		if ( results.size() == 1 ) {
			Object id = results.getValue(0, API_RESULT_IDENTIFIER);
			if ( id != null ) {
				projectID = new Integer(id.toString());
			}
		}
		return projectID;
	}